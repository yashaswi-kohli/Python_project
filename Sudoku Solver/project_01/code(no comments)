sudoku_board = [
    [0, 0, 0,     8, 0, 0,     0, 0, 0],
    [0, 4, 0,     0, 0, 0,     2, 0, 0],
    [0, 0, 3,     0, 9, 5,     0, 6, 0],

    [0, 0, 5,     0, 7, 6,     0, 9, 0],
    [3, 0, 0,     0, 0, 0,     0, 0, 5],
    [0, 0, 0,     0, 0, 1,     0, 0, 0],

    [0, 0, 7,     1, 0, 0,     0, 0, 0],
    [2, 0, 0,     0, 8, 7,     6, 0, 0],
    [0, 0, 0,     3, 0, 0,     0, 8, 0]
]


def print_board(board):

    for row in range(9):
        if row % 3 == 0 and row != 0:
            print("- - - - - - - - - - -")

        for col in range(9):
            if col % 3 == 0 and col != 0:
                print("| ", end="")

            if col == 8:
                print(board[row][col])
            else:
                print(str(board[row][col]) + " ", end="")


def finding_empty(board):

    for row in range(9):
        for col in range(9):
            if board[row][col] == 0:
                return row, col

    return None


def valid(num, position, board):

    # Check row
    for col in range(9):
        if board[position[0]][col] == num and position[1] != col:
            return False

    # Check column
    for row in range(9):
        if board[row][position[1]] == num and position[0] != row:
            return False

    # Check box
    box_x = (position[1] // 3) * 3
    box_y = (position[0] // 3) * 3

    for i in range(box_y, box_y + 3):
        for j in range(box_x, box_x + 3):
            if board[i][j] == num and position != (i, j):
                return False
                
    return True


def sudoku_solver(board):

    find = finding_empty(board)

    if not find:
        return True

    else:
        row, col = find

    for num in range(1, 10):
        if valid(num, (row, col), board):
            board[row][col] = num

            if sudoku_solver(board):
                return True

            else:
                board[row][col] = 0

    return False


print("\nSudoku Problem:\n")

print_board(sudoku_board)

sudoku_solver(sudoku_board)

print("\nStarting to solve.....\nSolved!\n")

print_board(sudoku_board)
