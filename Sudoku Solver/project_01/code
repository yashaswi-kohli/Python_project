sudoku_board = [
    [0, 0, 0,     8, 0, 0,     0, 0, 0],
    [0, 4, 0,     0, 0, 0,     2, 0, 0],
    [0, 0, 3,     0, 9, 5,     0, 6, 0],

    [0, 0, 5,     0, 7, 6,     0, 9, 0],
    [3, 0, 0,     0, 0, 0,     0, 0, 5],
    [0, 0, 0,     0, 0, 1,     0, 0, 0],

    [0, 0, 7,     1, 0, 0,     0, 0, 0],
    [2, 0, 0,     0, 8, 7,     6, 0, 0],
    [0, 0, 0,     3, 0, 0,     0, 8, 0]
]


def print_board(board):                        # This is a function to print the board

    for row in range(len(board)):              # This for loop will print a line after every 3 rows.
        if row % 3 == 0 and row != 0:
            print("- - - - - - - - - - -")

        for col in range(len(board)):          # This for loop will print a '| ' after every 3 elements.
            if col % 3 == 0 and col != 0:
                print("| ", end="")

            if col == 8:                       # This is will change the line, as the row is ended, now we will print
                print(board[row][col])         # every element of list of list from 0,0 to 8,8 by one by one
            else:                              # This will continue the line till the last col of the row
                print(str(board[row][col]) + " ", end="")


def finding_empty(board):             # This function will find all zero's or empty space and return their index.

    for row in range(len(board)):     # len(board) which is total 9 elements
        for col in range(9):          # As there are total 9 rows & column, so we can write 9 also, instead of using len
            if board[row][col] == 0:  # If the element given at the particular index is 0, then it will return the index
                return row, col       # row, column

    return None


def valid(num, position, board):

    # Check row
    for col in range(9):                                            # By keeping the same value of row given we are check all the value in other column
        if board[position[0]][col] == num and position[1] != col:   # except the given column
            return False

    # Check column
    for row in range(9):                                            # By keeping the same value of column given we are check all the value in other row
        if board[row][position[1]] == num and position[0] != row:   # except the given row
            return False

    # Check box
    box_x = (position[1] // 3) * 3                                   # As there are 9 elements, and it index start from 0,1,2,3,4,5,6,7 and 8
    box_y = (position[0] // 3) * 3                                   # so when we will divide it from 3, the result will 0,1 and 2 only.

    # and by multiplying by 3 we will reach to each box their starting index: 0,3,6
    # From this we can index the all 9 box coordinate's, for eg:

    #       0,0 | 0,1 | 0,2
    #       1,0 | 1,1 | 1,2
    #       2,0 | 2,1 | 2,2

    for i in range(box_y * 3, box_y * 3 + 3):                        # now by adding by 3 we will reach it end element (0-3), (3-6), (6-9)
        for j in range(box_x * 3, box_x * 3 + 3):                    # which is (0,1,2) , (3,4,5) and (6,7,8)
            if board[i][j] == num and position != (i, j):            # ignoring this index as it is the index we have entered the
                return False                                         # number, besides that index if we find number in other index then we will return false

    # And now at the very end, if we've passed all these  checks that we haven't returned false yet, that  means that while it is valid, and we can return  true.
    return True   


def sudoku_solver(board):

    find = finding_empty(board)

    if not find:                           # here we will see whether there's any empty space is left or not
        return True                        # if not this means we have completed the solution.

    else:                                  # if there's a empty space to put a number, then we call find function to
        row, col = find                    # to find the empty function

    for num in range(1, 10):               # Now we will start adding number from 1 to 9, to empty space
        if valid(num, (row, col), board):  # Here we calling the valid function to check whether it is valid or not
            board[row][col] = num          # If it is valid then we will print the number on the board

            if sudoku_solver(board):       # Now we are going to recursively, call our function, until we reach the end
                return True  # So if that comes out as true,then we know that our Sudoku is solved so we can return true

            else:                          # If the number is wrong, and further it will not work, so here we will do
                board[row][col] = 0        # Backtracking, we will reset the entered number equal to zero

    return False  # If none of the number's that we try work, then this puzzle is UNSOLVABLE!!


print("\nSudoku Problem:\n")
print_board(sudoku_board)
sudoku_solver(sudoku_board)

print("\nStarting to solve.....\nSolved!\n")
print_board(sudoku_board)
